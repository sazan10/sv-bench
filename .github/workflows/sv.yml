name: sv-directories1

on:
  push:
jobs:
  run-tsan:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2 

      - name: Install dependencies for project (Linux)
        if: runner.os == 'Linux'
        run: | 
          sudo apt-get update
          sudo apt-get install -y autotools-dev automake libevent-dev
          
      - name: Install Sanitizer dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y clang-14 libclang-14-dev llvm-14 llvm-14-dev llvm-14-tools llvm-14-linker-tools

      - name: Compile codes 
        run: |
          set +e
          git clone https://gitlab.com/sosy-lab/benchmarking/sv-benchmarks.git
          cd sv-benchmarks/c
          mkdir -p msan_logs
          DIR_FILE="../../directories.txt"
          CC="clang"
          CFLAGS="-fsanitize=memory -fPIE -fPIC -g -O2"
          OUTPUT_DIR="build"
          #find . -type f -name "*.c" | while read -r cfile; do
          #  filename=$(basename "$cfile" .c)
          #  dirname=$(dirname "$cfile" ) 
          #  clang -fsanitize=memory -fsanitize-memory-track-origins -fPIE -fPIC -g -O2 $cfile -o "$dirname/$filename"
          #  echo
          #done
          LOG_FILE="compiled_files.log"
          ERROR_LOG="compilation_errors.log"

          # Clear the log files or create them if they don't exist
          > "$LOG_FILE"
          > "$ERROR_LOG"
          read -r -a dirs < "$DIR_FILE"

          # Iterate over each directory in the array
          for dir in "${dirs[@]}"; do
              # Check if the directory exists
              if [ -d "$dir" ]; then
                  # Find all .c files in the directory
                  for file in $(find "$dir" -type f -name "*.c"); do
                      # Get the base name of the file (without extension)
                      base_name=$(basename "$file" .c)
                      dirname=$(dirname "$file" ) 
                      # Compile the file to an object file in the output directory
                      echo "Compiling $file..."
                      echo "Directory name: $dirname/$base_name"
                      $CC $CFLAGS "$file" -o "$dirname/$base_name"
                      # Check if the compilation succeeded
                      if [ $? -ne 0 ]; then
                          echo "Error compiling $file. Exiting."
                          echo "Error compiling $file." >> "$ERROR_LOG"
                      else
                         	# Log the successfully compiled file and its directory
                          echo "Successfully compiled: $file -> $dirname/$base_name" >> "$LOG_FILE"
                      fi
                  done
              else
                  echo "Directory $dir does not exist. Skipping."
              fi
          done 
          is_executable() {
            local file="$1"
            if file "$file" | grep -q 'ELF 64-bit'; then
              return 0
            else
              return 1
            fi
          }
          run_with_asan() {
            local executable="$1"
            MSAN_OPTIONS="exitcode=1 verbosity=1 halt_on_error=1 print_stats=1 log_path=./msan_logs/$(dirname "$file" )/$(basename "$executable")/$i.txt" timeout 10s "$executable"
            local exit_status=$?
          }
          find . -type f -executable | while read -r file; do
            if is_executable "$file"; then
              for i in {1..10}; do
                echo "Executing $file: Iteration No: $i"
                run_with_asan "$file" $i
              done
                fi
          done
      - name: Upload san reports
        uses: actions/upload-artifact@v4
        with:
          name: tsan-report
          path: './sv-benchmarks/c/msan_logs/*'
